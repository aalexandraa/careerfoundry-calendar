{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["locale","de","App","useSWR","data","error","today","startOfDay","Date","useState","selectedDate","setSelectedDate","selectedSlot","setSelectedSlot","reason","setReason","ownSlots","setOwnSlots","flash","setFlash","slots","calendar","map","slot","parse","date_time","hitler","monthDays","d","getDaysInMonth","startOfMonth","push","addDays","weekDays","x","hours","Array","i","onBook","event","a","preventDefault","ok","concat","className","format","setTimeout","day","isPast","isEqual","isSameDay","onClick","disabled","slice","hour","slotStatus","slotClassName","start","set","end","isBooked","some","isSelfBooked","isSelected","alert","onSubmit","mentor","name","onChange","target","value","required","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d26d12da.chunk.js","sourcesContent":["import useSWR from \"swr\";\nimport { useState } from \"react\";\nimport {\n  isEqual,\n  isPast,\n  addDays,\n  format,\n  set,\n  startOfDay,\n  startOfMonth,\n  getDaysInMonth,\n  isSameDay,\n} from \"date-fns\";\nimport { de } from \"date-fns/locale\";\n\nconst locale = de;\n\nfunction App() {\n  const { data, error } = useSWR(\n    \"https://private-37dacc-cfcalendar.apiary-mock.com/mentors/1/agenda\"\n  );\n\n  const today = startOfDay(new Date());\n\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [selectedSlot, setSelectedSlot] = useState(null);\n  const [reason, setReason] = useState(\"\");\n  const [ownSlots, setOwnSlots] = useState([]);\n  const [flash, setFlash] = useState(\"\");\n\n  if (error) return <div>failed to load</div>;\n  if (!data) return <div>loading...</div>;\n\n  const slots = data.calendar.map(\n    (slot) => new Date(Date.parse(slot.date_time))\n  );\n\n  const hitler = selectedDate || today;\n  let monthDays = [];\n  for (let d = 0; d < getDaysInMonth(startOfMonth(hitler)); d++) {\n    monthDays.push(addDays(startOfMonth(hitler), d));\n  }\n\n  let weekDays = [];\n  for (let x = 0; x < 7; ++x) {\n    weekDays.push(addDays(selectedDate, x - 3));\n  }\n\n  const hours = [...Array(24)].map((x, i) => i);\n\n  const onBook = async (event) => {\n    event.preventDefault();\n\n    // const response = await fetch(\"https://example.com/book\", {\n    //   method: \"POST\",\n    //   body: JSON.stringify({ reason, selectedSlot }),\n    // });\n\n    const response = { ok: true };\n\n    if (response.ok) {\n      setOwnSlots(ownSlots.concat(selectedSlot));\n\n      setFlash(\n        <div className=\"space-y-4\">\n          <p>Appointment confirmed for {format(selectedSlot, \"PPPPp\")}</p>\n          <p>{reason}</p>\n        </div>\n      );\n\n      setTimeout(() => setFlash(\"\"), 5000);\n\n      // reset\n      setSelectedSlot(null);\n      setReason(\"\");\n    } else {\n      setFlash(\"ERROR! Couldnt book your appointment please try agian\");\n    }\n  };\n\n  return (\n    <div className=\"mx-auto max-w-4xl space-y-4 p-4\">\n      {!selectedSlot && (\n        <div className=\"text-center\">\n          <div className=\"font-bold\">{format(hitler, \"MMMM yyyy\")}</div>\n          <div className=\"grid grid-cols-7\">\n            {monthDays.map((day) => {\n              let className;\n              if (isPast(day) && !isEqual(today, day)) {\n                className = \"text-gray-400\";\n              } else if (isSameDay(day, today)) {\n                className = \"font-bold cursor-pointer\";\n              } else {\n                className = \"cursor-pointer\";\n              }\n\n              if (isSameDay(day, selectedDate)) {\n                className += \" bg-yellow-100\";\n              }\n\n              const onDayClick = () => {\n                if (isPast(day) && !isEqual(today, day)) {\n                  return;\n                }\n\n                setSelectedDate(day);\n              };\n\n              return (\n                <button key={day} onClick={onDayClick} className={className}>\n                  {format(day, \"d\")}\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {!selectedSlot && selectedDate && (\n        <div className=\"grid grid-cols-7 text-center\">\n          {weekDays.map((day) => {\n            let className;\n            let disabled = false;\n            if (isSameDay(day, selectedDate)) {\n              className = \"bg-yellow-100\";\n            } else if (isPast(day) && !isEqual(today, day)) {\n              className = \"text-gray-400\";\n              disabled = true;\n            }\n\n            const changeDate = () => {\n              if (!isPast(day) || isEqual(today, day)) {\n                setSelectedDate(day);\n              }\n            };\n\n            return (\n              <div key={day} className={className}>\n                <button\n                  className=\"block h-20 w-full\"\n                  onClick={changeDate}\n                  disabled={disabled}\n                >\n                  <strong>{format(day, \"eeee\", { locale }).slice(0, 2)}</strong>\n                  <br />\n                  {format(day, \"d LLL\", { locale })}\n                </button>\n                {hours.map((hour) => {\n                  const start = set(day, { hours: hour });\n                  const end = set(day, { hours: hour + 1 });\n\n                  const isBooked = slots.some((slot) => {\n                    return start <= slot && slot < end;\n                  });\n\n                  const isSelfBooked = ownSlots.some((slot) => {\n                    return start <= slot && slot < end;\n                  });\n\n                  const isSelected = isEqual(selectedSlot, start);\n\n                  let slotStatus;\n                  if (isBooked) {\n                    slotStatus = \"booked\";\n                  } else if (isSelfBooked) {\n                    slotStatus = \"selfBooked\";\n                  } else if (isSelected) {\n                    slotStatus = \"selected\";\n                  } else if (isPast(start)) {\n                    slotStatus = \"past\";\n                  } else {\n                    slotStatus = \"free\";\n                  }\n\n                  const onSlotClick = () => {\n                    if (slotStatus !== \"free\") {\n                      alert(\"Slot is not available!\");\n                      return;\n                    }\n\n                    setSelectedSlot(start);\n                  };\n\n                  let slotClassName;\n                  switch (slotStatus) {\n                    case \"booked\":\n                      slotClassName = \"bg-red-100\";\n                      break;\n                    case \"selfBooked\":\n                      slotClassName = \"bg-blue-100\";\n                      break;\n                    case \"selected\":\n                      slotClassName = \"bg-green-500\";\n                      break;\n                    case \"free\":\n                      slotClassName =\n                        \"bg-green-100 cursor-pointer hover:bg-green-300\";\n                      break;\n                    default:\n                      slotClassName = \"bg-gray-100 text-gray-400\";\n                      break;\n                  }\n\n                  return (\n                    <div key={hour} className={slotClassName}>\n                      <button onClick={onSlotClick}>\n                        {format(start, \"p\", { locale })}\n                      </button>\n                    </div>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      )}\n      {flash && (\n        <div className=\"border p-4 text-green-600 border-current rounded\">\n          {flash}\n        </div>\n      )}\n      {selectedSlot && (\n        <form onSubmit={onBook}>\n          <div className=\"border p-4 space-y-4\">\n            <button onClick={() => setSelectedSlot(null)}>‹ Back</button>\n            <h2 className=\"text-4xl text-bold\">Book appointment</h2>\n            <p>Mentor: {data.mentor.name}</p>\n            <p>\n              Selected time slot: {format(selectedSlot, \"PPPPp\", { locale })}{\" \"}\n              for 1 hour\n            </p>\n            <p>\n              <label>Reason:</label>\n              <br />\n              <textarea\n                className=\"border p-2 w-full h-40\"\n                onChange={(event) => setReason(event.target.value)}\n                required\n                value={reason}\n              ></textarea>\n            </p>\n            <p>\n              <button className=\"border px-4 py-2 text-bold\">\n                Book appointment\n              </button>\n            </p>\n          </div>\n        </form>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}